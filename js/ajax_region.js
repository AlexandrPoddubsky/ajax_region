(function ($) {  Drupal.ajax_region = {};  $(document).ready(function() {    for (var i in Drupal.settings.ajax_region.array) {      var ar = Drupal.settings.ajax_region.array[i]      $(ar.link).each(function(index) {        $(this).attr('ajax-region-index', i);      });    }    $('a').each(function(index) {      if($(this).attr('ajax-region-index')) {        $(this).bind('click', ajaxregion_click);      }    });    function ajaxregion_click() {      // Store current link for ajax call while detecting home.      var link = this;      // Unfortunally, we need to override default explorer 7.0 behaviour.      // See:      // @link: http://stackoverflow.com/questions/7793728/get-a-relative-path-with-jquery-attr-property-with-ie7      if (($.browser.msie) && ($.browser.version == '7.0')) {        var url = $(link).attr('href').replace('http://'+window.location.hostname,'');      }      else {        var url = $(link).attr('href');      }      // Load region.      ajaxregion_load(link, url);      // We don't really want default click.      return false;    }    // Function to load region.    function ajaxregion_load(link, url) {      var i = $(link).attr('ajax-region-index');      var link_attr = Drupal.settings.ajax_region.array[i];      // Browser loading indicator (start).      if (link_attr.set_indicator) {        $loadingIndicator = $('<iframe src="/ajax_region/sleep/100" style="display: none;">');        $loadingIndicator.appendTo('body');      }      // Check custom function ajax_region_before().      if (typeof Drupal.ajax_region.before == 'function') {        Drupal.ajax_region.before(link);      }      // Make ajax call to module.	  eval('var post='+link_attr.regions);      $.ajax({        type: 'POST',        url: url,        data: {ajax_region: post},        dataType: 'json',        success: function(resp) {          var settings;          // Settings (1 receive step).          for (var i in resp) {              obj = resp[i];              switch (obj.id) {                case 'settings' :                  settings = obj;                  break;                  case 'views' :                  if (Drupal.settings.views === undefined) {                    Drupal.settings.views = obj.views;                  }                  else {                    for (var av in obj.views.ajaxViews) {                      Drupal.settings.views.ajaxViews[av] = obj.views.ajaxViews[av];                    }                    break;                  }              }          }          // Set browser window title using format "Node title | Sitename".          if (link_attr.set_title) {            document.title = settings.node_title + ' | ' + Drupal.settings.ajax_region.site_name;          }          // Set up current page address.          if(link_attr.update_current_address) {            history.pushState({path: url}, '', url);          }          // Regions (2 receive step).          for (var i in resp) {            obj = resp[i];            if (obj.id == 'region') {              Drupal.detachBehaviors($(obj.selector));              $(obj.selector).html(obj.html);              Drupal.attachBehaviors($(obj.selector));            }          }          // Set up .active class for current links.          if(link_attr.update_active_links) {            $('a').removeClass('active');            $('a[href="'+url+'"]').addClass('active');          }          // Check custom function ajax_region_after().          if (typeof Drupal.ajax_region.after == 'function') {            Drupal.ajax_region.after(link, settings);          }		            // Browser loading indicator (stop).          if (link_attr.set_indicator) {            $loadingIndicator.remove();          }        }      });    }  });})(jQuery);